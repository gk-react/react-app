{"version":3,"sources":["MyForm.js","App.js","serviceWorker.js","index.js"],"names":["MyForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","myChangeHandler","event","setState","username","target","value","state","mycar","header","react_default","a","createElement","type","onChange","React","Component","App","src_MyForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAgCeA,cA9Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGRQ,gBAAkB,SAACC,GACjBR,EAAKS,SAAS,CAACC,SAAUF,EAAMG,OAAOC,SAHtCZ,EAAKa,MAAQ,CAAEH,SAAU,GAAII,MAAM,IAFlBd,wEAQlB,IAAIe,EAAS,GAOZ,OALGA,EADGZ,KAAKU,MAAMH,SACPM,EAAAC,EAAAC,cAAA,UAAKf,KAAKU,MAAMH,UAEhB,GAIRM,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAIH,GACJC,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAMC,SAAUjB,KAAKI,kBACvCS,EAAAC,EAAAC,cAAA,UAAQN,MAAOT,KAAKU,MAAMC,OAClBE,EAAAC,EAAAC,cAAA,UAAQN,MAAM,QAAd,QACAI,EAAAC,EAAAC,cAAA,UAAQN,MAAM,SAAd,SACAI,EAAAC,EAAAC,cAAA,UAAQN,MAAM,QAAd,iBAxBaS,IAAMC,WCYXC,mLANZ,OAECP,EAAAC,EAAAC,cAACM,EAAD,aANcH,IAAMC,WCSLG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,KACVhB,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,6BAAiCe,SAASC,eAAe,SDoHzD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0be383ae.chunk.js","sourcesContent":["import React from 'react';\r\nclass MyForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { username: '' ,mycar:''};\r\n  }\r\n  myChangeHandler = (event) => {\r\n    this.setState({username: event.target.value});\r\n  }\r\n  render() {\r\n  \tlet header = '';\r\n      if (this.state.username) {\r\n      \theader=<h1>{this.state.username}</h1>;\r\n      }else{\r\n      \theader='';\r\n      }\r\n\r\n    return (\r\n      <form>\r\n      <h1>He`llo </h1>\r\n      <p>{header}</p>\r\n      <input type='text'onChange={this.myChangeHandler}/>\r\n<select value={this.state.mycar}>\r\n        <option value=\"Ford\">Ford</option>\r\n        <option value=\"Volvo\">Volvo</option>\r\n        <option value=\"Fiat\">Fiat</option>\r\n      </select>\r\n\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default MyForm;\r\n\r\n \r\n \r\n \r\n \r\n\r\n","import React from 'react';\nimport MyForm from './MyForm';\n//import BookList from './container/book_list';\n class App extends React.Component{\n\n  render()\n  {\n    return(\n     \n     <MyForm/>\n      )\n  }\n }\n export default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n/*import {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport postReducer from './reducers/postReducer';\n\n //const store=createStore(postReducer)//;\n//ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));*/\nReactDOM.render(<App>\n      <p>Paragraph element</p>\n      <span>Span element</span></App>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}